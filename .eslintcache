[{"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/App.js":"1","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/LandingPageView/LandingPageView.js":"2","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/global.js":"3","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/HomePageView/HomePageView.js":"4","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/RegisterForm/RegisterForm.js":"5","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/useForm/useForm.js":"6","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/Landing/Landing.js":"7","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/CallToAction/CallToAction.js":"8","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/index.js":"9","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/pages/HomePage.js":"10","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/PhoneImage/PhoneImage.js":"11","/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/controls/Button.js":"12"},{"size":1221,"mtime":1610188077585,"results":"13","hashOfConfig":"14"},{"size":793,"mtime":1610026024548,"results":"15","hashOfConfig":"14"},{"size":63,"mtime":1609847961812,"results":"16","hashOfConfig":"14"},{"size":3193,"mtime":1610111064106,"results":"17","hashOfConfig":"14"},{"size":5603,"mtime":1610185762323,"results":"18","hashOfConfig":"14"},{"size":1057,"mtime":1608996647405,"results":"19","hashOfConfig":"14"},{"size":1313,"mtime":1610012330989,"results":"20","hashOfConfig":"14"},{"size":1165,"mtime":1610114596684,"results":"21","hashOfConfig":"14"},{"size":488,"mtime":1610188436501,"results":"22","hashOfConfig":"14"},{"size":192,"mtime":1610111066266,"results":"23","hashOfConfig":"14"},{"size":805,"mtime":1608559315637,"results":"24","hashOfConfig":"14"},{"size":393,"mtime":1608972242650,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13k4hzi",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/App.js",["55"],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/LandingPageView/LandingPageView.js",["56"],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/global.js",[],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/HomePageView/HomePageView.js",["57","58","59"],"import React, { useState, useEffect }from 'react'\n\nimport NavBar from './../NavBar/NavBar'\nimport LandingPageView from './../LandingPageView/LandingPageView'\n\nimport HomePageContext from './../../context/HomePageContext'\nimport UserLoginContext from './../../context/UserLoginContext'\n\nimport { serverURL } from './../../global'\n\nimport axios from 'axios'\n\nconst HomePageView = () => {\n    //use context here\n    const [ page, setPage ] = useState({\n        page: '0'\n    })\n    const [ userData, setUserData ] = useState({\n        token: null,\n        user: null,\n        loginSuccess: null\n    })\n\n    const [ viewerData, setViewerData ] = useState({\n        token: null,\n        user: null,\n        loginSuccess: null\n    })\n\n    //check logged in\n    useEffect(async () => {\n        const isUserLoggedIn = await checkUserLoggedIn()\n        const isViewerLoggedIn = await checkViewerLoggedIn()\n\n        if (isUserLoggedIn){\n            setUserData(isUserLoggedIn)\n        }\n        if(isViewerLoggedIn){\n            setViewerData(isViewerLoggedIn)\n        }\n    }, [])\n    //add the user page here\n    return(\n        <div>\n            <UserLoginContext.Provider value={{ userData, setUserData }}>\n                <HomePageContext.Provider value={{ page, setPage }}>\n                    <div>\n                        {\n                            userData.user ?\n                                (\n                                    'hi'\n                                )\n                                :\n                                (\n                                    <div>\n                                        <NavBar />\n                                        <LandingPageView />\n                                    </div>\n                                )\n                        }\n                    </div>\n                </HomePageContext.Provider>\n            </UserLoginContext.Provider>\n        </div>\n    )\n}\nconst checkUserLoggedIn = async () => {\n    let token = localStorage.getItem('auth-token')\n    if (token === null) {\n        localStorage.setItem('auth-token', '')\n        token = '';\n    }\n    const tokenRes =  await verifyUserToken(token)\n    if(tokenRes.data.valid){\n        return({token, user: tokenRes.data.userObj, loginSuccess: true })\n    }\n    else{\n        return false\n    }\n}\n\nconst verifyUserToken = async ( token ) => {\n    const tokenRes = await axios.post(\n        `${serverURL}api/user/tokenIsValid`, null,\n        { headers: {'auth-token' : token} }\n    );\n    return tokenRes\n}\n\nconst checkViewerLoggedIn = async () => {\n    let token = localStorage.getItem('auth-token-viewer')\n    if (token === null) {\n        localStorage.setItem('auth-token-viewer', '')\n        token = '';\n    }\n    const tokenRes =  await verifyUserToken(token)\n    if(tokenRes.data.valid){\n        return({token, viewer: tokenRes.data.viewerObj, loginSuccess: true })\n    }\n    else{\n        return false\n    }\n}\n\nconst verifyViewerToken = async ( token ) => {\n\n    const tokenRes = await axios.post(\n        `${serverURL}api/viewer/tokenIsValid`, null,\n        { headers: {'auth-token-viewer' : token} }\n    );\n    return tokenRes\n}\n\n\nexport default HomePageView\n",["60","61"],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/RegisterForm/RegisterForm.js",["62","63","64","65","66","67","68"],"import React, { useEffect, useState, useContext } from 'react';\nimport { Grid, makeStyles } from '@material-ui/core'\n\nimport { useForm, Form } from './../useForm/useForm'\nimport Input from './../controls/Input'\nimport Button from './../controls/Button'\n\nimport HomePageContext from './../../context/HomePageContext'\nimport UserLoginContext from './../../context/UserLoginContext'\n\nimport axios from 'axios'\nimport { serverURL } from './../../global'\n\nconst useStyles = makeStyles( theme => ({\n   form: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    formItems: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '700px'\n    },\n}))\n\nconst initialFValues = {\n    name: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n}\n\nconst RegisterForm = () => {\n\n    const classes = useStyles();\n\n    const { userData, setUserData } = useContext(UserLoginContext)\n\n    const { registerState, setRegisterState } = useState({\n        loading: null,\n        user: null,\n        error: null\n    })\n    const validate = () => {\n        let temp = {}\n\n        temp.name = values.name? \"\" : \"Name is required\"\n        temp.name = values.name.length > 5 ? \"\" : \"Name must have minimum length of 6 characters\"\n\n        temp.email = (/.+@.+..+/).test(values.email)? \"\" : \"Email is invalid\"\n\n        temp.username = values.username ? \"\" : \"This field is required\"\n        temp.username = values.username.length > 5 ? \"\" : \"Username must have minimum length of 6 characters\"\n\n        temp.password = values.password ? \"\" :  \"This field is required\"\n        temp.password = values.password.length > 6 ?  \"\"  : \"Password must be greater than 6 characters\"\n\n        temp.confirmPassword = values.confirmPassword ? \"\" :  \"This field is required\"\n        temp.confirmPassword = values.password === values.confirmPassword ? \"\" : \"Passwords do not match\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x === \"\")\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues)\n\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        if(validate()){\n            const userData = await callRegisterAPI(values.name, values.username, values.email, values.password)\n            setUserData(userData);\n        }\n    }\n\n    return(\n        <Form onSubmit={handleSubmit}>\n            <Grid container className={classes.form}>\n                <Grid item className={classes.formItems}>\n                    <Input\n                        label='Name'\n                        name='name'\n                        type='text'\n                        error={errors.name}\n                        value={values.name}\n                        onChange={handleInputChange}\n                    />\n                    <Input\n                        label='Username'\n                        name='username'\n                        type='text'\n                        error={errors.username}\n                        value={values.username}\n                        onChange={handleInputChange}\n                    />\n                    <Input\n                        label='Email'\n                        name='email'\n                        type='email'\n                        error={errors.email}\n                        value={values.email}\n                        onChange={handleInputChange}\n                    />\n                    <Input\n                        label='Password'\n                        name='password'\n                        type='password'\n                        error={errors.password}\n                        value={values.password}\n                        onChange={handleInputChange}\n                    />\n                    <Input\n                        label='Confirm Password'\n                        name='confirmPassword'\n                        type='password'\n                        error={errors.confirmPassword}\n                        value={values.confirmPassword}\n                        onChange={handleInputChange}\n                    />\n                    <br/>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"large\"\n                        type=\"submit\"\n                        text=\"Register\"\n                        onSubmit={handleSubmit}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n    )\n}\n\nconst callRegisterAPI = async ( name, username, email, password ) => {\n    let data = JSON.stringify({\n        email: email,\n        password: password,\n        name: name,\n        username: username,\n        youtubeid: undefined,\n        instagramid: undefined,\n        links: [],\n        posts: []\n        }\n    )\n    var registerAPI = {\n        method: 'post',\n        url: `${serverURL}api/user/register`,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data : data\n    };\n    return axios(registerAPI)\n        .then( res => {\n            localStorage.setItem('auth-token', res.data.token)\n            const userData = {\n                user: res.data.user,\n                token: res.data.token,\n                loginSuccess: res.data.loginSuccess\n            }\n            return userData;\n        })\n        .catch( error => {\n            return error\n        });\n\n}\nexport default RegisterForm;\n",["69","70"],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/useForm/useForm.js",[],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/Landing/Landing.js",[],["71","72"],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/CallToAction/CallToAction.js",[],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/index.js",[],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/pages/HomePage.js",[],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/PhoneImage/PhoneImage.js",["73","74"],"/Users/gunit/projects/affiliate/frontend/frontend-aevin/src/components/controls/Button.js",[],{"ruleId":"75","severity":1,"message":"76","line":38,"column":11,"nodeType":"77","messageId":"78","endLine":38,"endColumn":18},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"80","line":24,"column":13,"nodeType":"77","messageId":"78","endLine":24,"endColumn":23},{"ruleId":"81","severity":1,"message":"82","line":31,"column":15,"nodeType":"83","endLine":41,"endColumn":6},{"ruleId":"75","severity":1,"message":"84","line":105,"column":7,"nodeType":"77","messageId":"78","endLine":105,"endColumn":24},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"75","severity":1,"message":"89","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":26},{"ruleId":"75","severity":1,"message":"90","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":23},{"ruleId":"75","severity":1,"message":"91","line":41,"column":13,"nodeType":"77","messageId":"78","endLine":41,"endColumn":21},{"ruleId":"75","severity":1,"message":"92","line":43,"column":13,"nodeType":"77","messageId":"78","endLine":43,"endColumn":26},{"ruleId":"75","severity":1,"message":"93","line":43,"column":28,"nodeType":"77","messageId":"78","endLine":43,"endColumn":44},{"ruleId":"75","severity":1,"message":"94","line":72,"column":9,"nodeType":"77","messageId":"78","endLine":72,"endColumn":18},{"ruleId":"75","severity":1,"message":"95","line":76,"column":9,"nodeType":"77","messageId":"78","endLine":76,"endColumn":18},{"ruleId":"85","replacedBy":"96"},{"ruleId":"87","replacedBy":"97"},{"ruleId":"85","replacedBy":"98"},{"ruleId":"87","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":17,"column":9,"nodeType":"102","messageId":"103","endLine":17,"endColumn":15},{"ruleId":"104","severity":1,"message":"105","line":27,"column":17,"nodeType":"106","endLine":27,"endColumn":118},"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'viewerData' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'verifyViewerToken' is assigned a value but never used.","no-native-reassign",["107"],"no-negated-in-lhs",["108"],"'useEffect' is defined but never used.","'HomePageContext' is defined but never used.","'userData' is assigned a value but never used.","'registerState' is assigned a value but never used.","'setRegisterState' is assigned a value but never used.","'setValues' is assigned a value but never used.","'resetForm' is assigned a value but never used.",["107"],["108"],["107"],["108"],"no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]